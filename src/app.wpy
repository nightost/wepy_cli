<style lang="less">
  @import "../node_modules/weui-wxss/dist/style/weui.wxss";
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy'
import Promise from 'promise-polyfill'
import 'wepy-async-function'

import { setStore } from 'wepy-redux'
import configStore from './store'
import {modal} from '@/utils/utils'

const store = configStore()
setStore(store)

export default class extends wepy.app {
  config = {
    pages: [
      'pages/home',
      'pages/map'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: '小程序',
      navigationBarTextStyle: 'black'
    }
  }

  globalData = {
    userInfo: null
  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
  }

  onLaunch() {
    this.testAsync()
    // this.getUserInfo('init')
  }

  sleep (s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved')
      }, s * 1000)
    })
  }

  async testAsync () {
    const data = await this.sleep(3)
    console.log(data)
  }

  async login (code, encryptedData, iv) {
    console.log(code)
    console.log(encryptedData)
    console.log(iv)
    return {
      token: '67777773'
    }
  }

  async getUserInfo(cb) {
    const token = wepy.getStorageSync('token')
    if (token) {
      if (cb !== 'init') {
        const userInfo = wepy.getStorageSync('userInfo')
        typeof cb === 'function' && cb(userInfo)
        return
      }
    }
    wepy.showLoading({
      title: '登录中',
      mask: true
    })
    const login = await wepy.login()
    if (login.code) {
      const userInfo = await wepy.getUserInfo().catch(res => {
        const refuseUser = wepy.getStorageSync('refuseUser')
        wepy.hideLoading()
        if (!refuseUser) {
          modal(null, null, '重新授权', '#3CC51F', '是', null, () => {
            wepy.setStorageSync('refuseUser', true)
          }, async () => {
            wepy.openSetting({
              success (res) {
                if (res.authSetting['scope.userInfo']) {
                  this.getUserInfo()
                }
              }
            })
          })
        }
      })
      if ((userInfo || {}).userInfo) {
        const encryptedData = encodeURIComponent(userInfo.encryptedData)
        const iv = userInfo.iv
        const saveLogin = await this.login(login.code, encryptedData, iv)
        if (saveLogin.token) {
          wepy.setStorageSync('token', saveLogin.token)
          wepy.setStorageSync('userInfo', saveLogin.userInfo)
          wepy.hideLoading()
          typeof cb === 'function' && cb(userInfo.userInfo)
        }
      }
    }
  }
}
</script>
